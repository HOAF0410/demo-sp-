#include <WiFi.h>
#include <WebServer.h>
#include <SD.h>
#include "driver/i2s.h"

// Khai báo chân nút nhấn và SD card
#define BUTTON_PIN 33
#define SD_CS      5

// Khai báo thông tin kết nối WiFi
const char* ssid = "vip1";
const char* password = "123456789";

// Tạo server trên cổng 80
WebServer server(80);

// Khai báo hàm xử lý
bool isRecording = false;
File wavFile;

// Hàm cấu hình I2S như trước
void i2s_install() {
  i2s_config_t i2s_config = {
    .mode = i2s_mode_t(I2S_MODE_MASTER | I2S_MODE_RX),
    .sample_rate = 44100,
    .bits_per_sample = I2S_BITS_PER_SAMPLE_16BIT,
    .channel_format = I2S_CHANNEL_FMT_ONLY_LEFT,
    .communication_format = I2S_COMM_FORMAT_I2S_MSB,
    .intr_alloc_flags = ESP_INTR_FLAG_LEVEL1,
    .dma_buf_count = 8,
    .dma_buf_len = 64
  };
  
  i2s_pin_config_t pin_config = {
    .bck_io_num = 26,
    .ws_io_num = 25,
    .data_out_num = I2S_PIN_NO_CHANGE,
    .data_in_num = 34
  };
  
  i2s_driver_install(I2S_NUM_0, &i2s_config, 0, NULL);
  i2s_set_pin(I2S_NUM_0, &pin_config);
}

// Ghi header cho file WAV
void writeWAVHeader(File file, int sampleRate, int bitsPerSample, int channels, int dataSize) {
  file.write((const uint8_t*)"RIFF", 4);
  int fileSize = 36 + dataSize;
  file.write((byte*)&fileSize, 4);
  file.write((const uint8_t*)"WAVE", 4);

  file.write((const uint8_t*)"fmt ", 4);
  int16_t audioFormat = 1; // PCM = 1
  int16_t numChannels = channels;
  file.write((byte*)&audioFormat, 2);
  file.write((byte*)&numChannels, 2);

  file.write((byte*)&sampleRate, 4);
  int32_t byteRate = sampleRate * channels * bitsPerSample / 8;
  file.write((byte*)&byteRate, 4);

  int16_t blockAlign = channels * bitsPerSample / 8;
  file.write((byte*)&blockAlign, 2);
  file.write((byte*)&bitsPerSample, 2);

  file.write((const uint8_t*)"data", 4);
  file.write((byte*)&dataSize, 4);
}

// Bắt đầu ghi âm
void startRecording() {
  Serial.println("Start recording...");
  wavFile = SD.open("/audio.wav", FILE_WRITE);
  writeWAVHeader(wavFile, 44100, 16, 1, 0); // Khởi tạo header WAV
  isRecording = true;
}

// Dừng ghi âm
void stopRecording() {
  isRecording = false;
  int dataSize = wavFile.size() - 44; // Trừ đi kích thước header
  wavFile.seek(4); // Về đầu file để cập nhật file size
  int fileSize = 36 + dataSize; // Kích thước file tổng
  wavFile.write((byte*)&fileSize, 4);
  
  wavFile.seek(40); // Về vị trí kích thước dữ liệu
  wavFile.write((byte*)&dataSize, 4);
  
  wavFile.close(); // Đóng file
  Serial.println("Recording stopped.");
}


// Xử lý yêu cầu truy cập file WAV qua web
void handleAudioDownload() {
  File file = SD.open("/audio.wav");
  if (!file) {
    server.send(404, "text/plain", "File not found");
    return;
  }
  
  server.streamFile(file, "audio/wav");
  file.close();
}

// Cấu hình web server
void setupWebServer() {
  server.on("/audio.wav", handleAudioDownload);
  server.begin();
  Serial.println("Web server started.");
}

void setup() {
  Serial.begin(115200);
  
  pinMode(BUTTON_PIN, INPUT_PULLUP);
  
  // Kết nối WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");
  Serial.println(WiFi.localIP()); // In địa chỉ IP của ESP32

  // Khởi động SD card
  if (!SD.begin(SD_CS)) {
    Serial.println("SD card init failed!");
    return;
  }

  // Cài đặt I2S và web server
  i2s_install();
  setupWebServer();
}

void loop() {
  // Kiểm tra trạng thái nút nhấn
  if (digitalRead(BUTTON_PIN) == LOW && !isRecording) {
    startRecording();
  }
  
  if (isRecording) {
    size_t bytesRead;
    int16_t i2s_buffer[512];
    i2s_read(I2S_NUM_0, i2s_buffer, sizeof(i2s_buffer), &bytesRead, portMAX_DELAY);
    wavFile.write((byte*)i2s_buffer, bytesRead);
    
    // Dừng ghi âm sau 10 giây
    if (wavFile.size() > 44100 * 2 * 10) {
      stopRecording();
    }
  }

  // Xử lý yêu cầu HTTP từ web server
  server.handleClient();
}
